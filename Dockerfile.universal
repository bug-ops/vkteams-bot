# Universal multi-stage Dockerfile for VK Teams Bot components
# Can build CLI, MCP server, or any other Rust binary using build arguments

ARG RUST_VERSION=1.75
FROM rust:${RUST_VERSION}-slim AS builder

# Build arguments
ARG PACKAGE_NAME
ARG BINARY_NAME=${PACKAGE_NAME}
ARG FEATURES=""
ARG BUILD_TARGET=""

# Validate required arguments
RUN test -n "$PACKAGE_NAME" || (echo "PACKAGE_NAME build arg is required" && exit 1)

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Cargo files first for better caching
COPY Cargo.toml Cargo.lock ./
COPY crates/*/Cargo.toml ./crates/

# Create workspace structure for dependency caching
RUN find crates -name "Cargo.toml" -exec dirname {} \; | \
    xargs -I {} mkdir -p {}/src && \
    find crates -name "Cargo.toml" -exec dirname {} \; | \
    xargs -I {} touch {}/src/lib.rs

# Create dummy main.rs for binaries
RUN find crates -name "Cargo.toml" -exec grep -l "\[\[bin\]\]" {} \; | \
    xargs -I {} dirname {} | \
    xargs -I {} touch {}/src/main.rs

# Pre-build dependencies with features if specified
RUN if [ -n "$FEATURES" ]; then \
        cargo build --release --package ${PACKAGE_NAME} --features "$FEATURES"; \
    else \
        cargo build --release --package ${PACKAGE_NAME}; \
    fi

# Clean up dummy files
RUN find crates -name "*.rs" -exec rm {} \;

# Copy real source code
COPY crates/ ./crates/

# Build the actual application
RUN if [ -n "$FEATURES" ]; then \
        cargo build --release --package ${PACKAGE_NAME} --features "$FEATURES"; \
    else \
        cargo build --release --package ${PACKAGE_NAME}; \
    fi

# Runtime stage
ARG RUNTIME_IMAGE=debian:bookworm-slim
FROM ${RUNTIME_IMAGE}

# Runtime build arguments
ARG PACKAGE_NAME
ARG BINARY_NAME=${PACKAGE_NAME}
ARG BINARY_PATH="/usr/local/bin"
ARG APP_USER="app"
ARG APP_UID="1000"
ARG APP_GID="1000"
ARG ADDITIONAL_PACKAGES=""

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    curl \
    ${ADDITIONAL_PACKAGES} \
    && rm -rf /var/lib/apt/lists/*

# Create application user and group
RUN groupadd -g ${APP_GID} ${APP_USER} && \
    useradd -r -u ${APP_UID} -g ${APP_USER} ${APP_USER}

# Create application directories
RUN mkdir -p /app/config /app/data /app/logs /app/downloads /app/uploads && \
    chown -R ${APP_USER}:${APP_USER} /app

# Copy the binary from builder stage
COPY --from=builder /app/target/release/${BINARY_NAME} ${BINARY_PATH}/${BINARY_NAME}
RUN chmod +x ${BINARY_PATH}/${BINARY_NAME}

# If building MCP server, also copy CLI binary
ARG INCLUDE_CLI_BINARY="false"
RUN if [ "$INCLUDE_CLI_BINARY" = "true" ]; then \
        COPY --from=builder /app/target/release/vkteams-bot-cli ${BINARY_PATH}/vkteams-bot-cli && \
        chmod +x ${BINARY_PATH}/vkteams-bot-cli; \
    fi

# Copy configuration files if they exist
COPY shared-config.toml /app/config/ || true
RUN if [ -f /app/config/shared-config.toml ]; then \
        mv /app/config/shared-config.toml /app/config/config.toml && \
        chown ${APP_USER}:${APP_USER} /app/config/config.toml; \
    fi

# Switch to application user
USER ${APP_USER}
WORKDIR /app

# Set common environment variables
ENV RUST_LOG=info
ENV APP_CONFIG_PATH=/app/config/config.toml

# Component-specific environment variables
ARG COMPONENT_TYPE=""
ENV COMPONENT_TYPE=${COMPONENT_TYPE}

# Set component-specific environment variables
RUN if [ "$COMPONENT_TYPE" = "mcp" ]; then \
        echo "export VKTEAMS_BOT_CLI_PATH=${BINARY_PATH}/vkteams-bot-cli" >> ~/.bashrc; \
    fi

# Health check (generic, override in docker-compose if needed)
ARG HEALTHCHECK_CMD=""
RUN if [ -n "$HEALTHCHECK_CMD" ]; then \
        echo "$HEALTHCHECK_CMD" > /app/healthcheck.sh && \
        chmod +x /app/healthcheck.sh; \
    else \
        echo "${BINARY_PATH}/${BINARY_NAME} --version" > /app/healthcheck.sh && \
        chmod +x /app/healthcheck.sh; \
    fi

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh || exit 1

# Default entrypoint and command
ENTRYPOINT []
CMD ["sh", "-c", "${BINARY_PATH}/${BINARY_NAME} --help"]

# Labels for better container management
ARG BUILD_DATE=""
ARG BUILD_VERSION=""
ARG BUILD_COMMIT=""

LABEL org.opencontainers.image.title="VKTeams Bot ${PACKAGE_NAME}" \
      org.opencontainers.image.description="VK Teams Bot ${PACKAGE_NAME} component" \
      org.opencontainers.image.version="${BUILD_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${BUILD_COMMIT}" \
      org.opencontainers.image.source="https://github.com/bug-ops/vkteams-bot" \
      component="${COMPONENT_TYPE}" \
      package="${PACKAGE_NAME}"