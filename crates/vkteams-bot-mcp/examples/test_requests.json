{
  "description": "Test requests for VKTeams Bot MCP Server file upload capabilities",
  "examples": [
    {
      "name": "Upload simple text file from base64",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_file_from_base64",
          "arguments": {
            "file_name": "hello.txt",
            "base64_content": "SGVsbG8gV29ybGQhIFRoaXMgaXMgYSB0ZXN0IGZpbGUu",
            "caption": "📄 Simple test file uploaded via MCP"
          }
        },
        "id": 1
      }
    },
    {
      "name": "Upload Python code as text file",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_text_as_file",
          "arguments": {
            "file_name": "calculator.py",
            "text_content": "#!/usr/bin/env python3\n\ndef add(a, b):\n    \"\"\"Add two numbers together.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\nif __name__ == \"__main__\":\n    print(\"Simple Calculator\")\n    print(f\"2 + 3 = {add(2, 3)}\")\n    print(f\"5 - 2 = {subtract(5, 2)}\")\n    print(f\"4 * 6 = {multiply(4, 6)}\")\n    print(f\"10 / 2 = {divide(10, 2)}\")",
            "caption": "🐍 Python calculator script generated by AI"
          }
        },
        "id": 2
      }
    },
    {
      "name": "Create and upload JSON configuration",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_json_file",
          "arguments": {
            "file_name": "app_config",
            "json_data": "{\"server\":{\"host\":\"localhost\",\"port\":8080,\"ssl\":true},\"database\":{\"url\":\"postgresql://localhost/myapp\",\"pool_size\":10,\"timeout\":30},\"logging\":{\"level\":\"info\",\"file\":\"/var/log/app.log\",\"max_size\":\"100MB\"},\"features\":{\"auth\":true,\"cache\":true,\"metrics\":true}}",
            "pretty_print": true,
            "caption": "⚙️ Application configuration file"
          }
        },
        "id": 3
      }
    },
    {
      "name": "Generate CSV report",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_csv_file",
          "arguments": {
            "file_name": "sales_report_q4_2024",
            "headers": "Month,Product,Revenue,Units Sold,Customer Count",
            "rows_json": "[[\"October\", \"Laptop Pro\", 25000, 25, 23], [\"October\", \"Wireless Mouse\", 1500, 50, 45], [\"October\", \"Monitor 4K\", 8000, 16, 16], [\"November\", \"Laptop Pro\", 30000, 30, 28], [\"November\", \"Wireless Mouse\", 1800, 60, 52], [\"November\", \"Monitor 4K\", 10000, 20, 19], [\"December\", \"Laptop Pro\", 35000, 35, 32], [\"December\", \"Wireless Mouse\", 2100, 70, 61], [\"December\", \"Monitor 4K\", 12000, 24, 23]]",
            "caption": "📊 Q4 2024 Sales Performance Report"
          }
        },
        "id": 4
      }
    },
    {
      "name": "Upload Rust code with syntax highlighting",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_code_file",
          "arguments": {
            "file_name": "web_server.rs",
            "code_content": "use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:3000\").await?;\n    println!(\"🚀 Server running on http://127.0.0.1:3000\");\n\n    loop {\n        let (mut socket, addr) = listener.accept().await?;\n        println!(\"📡 New connection from: {}\", addr);\n\n        tokio::spawn(async move {\n            let mut buffer = [0; 1024];\n            \n            match socket.read(&mut buffer).await {\n                Ok(n) if n == 0 => return,\n                Ok(n) => {\n                    let request = String::from_utf8_lossy(&buffer[0..n]);\n                    println!(\"📝 Request: {}\", request);\n                    \n                    let response = \"HTTP/1.1 200 OK\\r\\n\\r\\nHello from Rust server!\";\n                    if let Err(e) = socket.write_all(response.as_bytes()).await {\n                        println!(\"❌ Failed to write response: {}\", e);\n                    }\n                }\n                Err(e) => {\n                    println!(\"❌ Failed to read from socket: {}\", e);\n                }\n            }\n        });\n    }\n}",
            "description": "A simple async web server implementation in Rust using Tokio",
            "language": "Rust"
          }
        },
        "id": 5
      }
    },
    {
      "name": "Batch upload project files",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_multiple_files",
          "arguments": {
            "files_json": "[{\"name\": \"README.md\", \"content\": \"IyBNeSBQcm9qZWN0CgpUaGlzIGlzIGEgc2FtcGxlIHByb2plY3QgZGVtb25zdHJhdGluZyBmaWxlIHVwbG9hZCBjYXBhYmlsaXRpZXMu\"}, {\"name\": \"package.json\", \"content\": \"ewogICJuYW1lIjogIm15LXByb2plY3QiLAogICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAiZGVzY3JpcHRpb24iOiAiQSBzYW1wbGUgTm9kZS5qcyBwcm9qZWN0IiwKICAibWFpbiI6ICJpbmRleC5qcyIsCiAgInNjcmlwdHMiOiB7CiAgICAic3RhcnQiOiAibm9kZSBpbmRleC5qcyIsCiAgICAidGVzdCI6ICJucG0gdGVzdCIKICB9LAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiZXhwcmVzcyI6ICJeNC4xOC4yIgogIH0KfQ==\"}, {\"name\": \"index.js\", \"content\": \"Y29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTsKY29uc3QgYXBwID0gZXhwcmVzcygpOwpjb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwOwoKYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4gewogIHJlcy5qc29uKHsgbWVzc2FnZTogJ0hlbGxvIGZyb20gTm9kZS5qcyBzZXJ2ZXIhJyB9KTsKfSk7CgphcHAubGlzdGVuKHBvcnQsICgpID0+IHsKICBjb25zb2xlLmxvZyhgU2VydmVyIHJ1bm5pbmcgb24gcG9ydCAke3BvcnR9YCk7Cn0pOw==\"}]",
            "caption": "📦 Complete Node.js project structure"
          }
        },
        "id": 6
      }
    },
    {
      "name": "Validate file before upload",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "validate_file_before_upload",
          "arguments": {
            "file_name": "test_image.png",
            "base64_content": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
          }
        },
        "id": 7
      }
    },
    {
      "name": "Upload with format conversion to JSON",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_with_conversion",
          "arguments": {
            "file_name": "user_data.txt",
            "base64_content": "eyJ1c2VycyI6W3siaWQiOjEsIm5hbWUiOiJKb2huIERvZSIsImVtYWlsIjoiam9obkBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiJ9LHsiaWQiOjIsIm5hbWUiOiJKYW5lIFNtaXRoIiwiZW1haWwiOiJqYW5lQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIifV0sInRvdGFsIjoyLCJsYXN0X3VwZGF0ZWQiOiIyMDI0LTAxLTE1VDEwOjMwOjAwWiJ9",
            "target_format": "json",
            "caption": "🔄 Converting user data to formatted JSON"
          }
        },
        "id": 8
      }
    },
    {
      "name": "Upload JavaScript code with description",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_code_file",
          "arguments": {
            "file_name": "api_client.js",
            "code_content": "class ApiClient {\n  constructor(baseUrl, apiKey) {\n    this.baseUrl = baseUrl;\n    this.apiKey = apiKey;\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    };\n  }\n\n  async get(endpoint) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        method: 'GET',\n        headers: this.headers\n      });\n      return await this.handleResponse(response);\n    } catch (error) {\n      throw new Error(`GET request failed: ${error.message}`);\n    }\n  }\n\n  async post(endpoint, data) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(data)\n      });\n      return await this.handleResponse(response);\n    } catch (error) {\n      throw new Error(`POST request failed: ${error.message}`);\n    }\n  }\n\n  async handleResponse(response) {\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  }\n}\n\n// Example usage\nconst client = new ApiClient('https://api.example.com', 'your-api-key');\n\n// Get user data\nclient.get('/users/123')\n  .then(user => console.log('User:', user))\n  .catch(error => console.error('Error:', error));\n\n// Create new user\nclient.post('/users', {\n  name: 'John Doe',\n  email: 'john@example.com'\n})\n  .then(result => console.log('Created:', result))\n  .catch(error => console.error('Error:', error));",
            "description": "A reusable JavaScript API client class with error handling and authentication",
            "language": "JavaScript"
          }
        },
        "id": 9
      }
    },
    {
      "name": "Upload YAML configuration as text file",
      "request": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "upload_text_as_file",
          "arguments": {
            "file_name": "docker-compose.yml",
            "text_content": "version: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:password@db:5432/myapp\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=myapp\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - web\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  default:\n    driver: bridge",
            "caption": "🐳 Docker Compose configuration for multi-service application"
          }
        },
        "id": 10
      }
    }
  ],
  "notes": {
    "base64_encoding": "All base64 content in examples is properly encoded. To create your own:",
    "encoding_examples": [
      "echo 'Hello World!' | base64",
      "base64 -i input.txt -o output.b64",
      "python3 -c \"import base64; print(base64.b64encode(b'Hello World!').decode())\""
    ],
    "file_size_limits": "Maximum file size is 10MB per file",
    "batch_upload_limits": "Maximum 10 files per batch upload",
    "supported_formats": [
      "Text files: .txt, .md, .json, .xml, .csv, .log",
      "Code files: .rs, .py, .js, .ts, .html, .css, .sql",
      "Images: .png, .jpg, .jpeg, .gif, .svg, .webp",
      "Documents: .pdf, .doc, .docx, .xls, .xlsx",
      "Archives: .zip, .tar, .gz, .7z"
    ]
  }
}
