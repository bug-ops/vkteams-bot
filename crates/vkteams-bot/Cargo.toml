[package]
keywords = ["vkteams", "bot", "api", "automation", "mcp"]
categories = ["api-bindings", "command-line-utilities", "web-programming"]
description = "High-performance VK Teams Bot API toolkit with CLI and MCP server support"
readme = "README.md"
repository = "https://github.com/bug-ops/vkteams-bot/tree/master"
homepage = "https://github.com/bug-ops/vkteams-bot"
documentation = "https://docs.rs/vkteams-bot"
name = "vkteams-bot"
version = "0.11.4"
authors = ["Andrei G. <k05h31@gmail.com>"]
license.workspace = true
edition.workspace = true
rust-version.workspace = true

[dependencies]
async-trait = { workspace = true }
axum = { workspace = true, features = ["macros", "http2"], optional = true }
bytes = { workspace = true }
chrono = { workspace = true, features = ["serde"], optional = true }
crossbeam-utils = { workspace = true }
dashmap = { workspace = true }
futures = { workspace = true }
http = { workspace = true }
reqwest = { workspace = true, features = [
    "json",
    "stream",
    "multipart",
    "rustls-tls",
    "__tls",
] }
toml = { workspace = true }
ollama-rs = { workspace = true, optional = true }
once_cell = { workspace = true }
openai-api-rs = { workspace = true, optional = true }
opentelemetry = { version = "0.30", optional = true }
opentelemetry-otlp = { version = "0.30", features = [
    "grpc-tonic",
], optional = true }
opentelemetry_sdk = { version = "0.30", optional = true }
opentelemetry-semantic-conventions = { version = "0.30", features = [
    "semconv_experimental",
], optional = true }
paste = { workspace = true }
pgvector = { workspace = true, features = ["sqlx", "serde"], optional = true }
rand = { workspace = true }
rayon = { workspace = true, optional = true }
regex = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_url_params = { workspace = true }
sqlx = { workspace = true, features = [
    "runtime-tokio-rustls",
    "postgres",
    "uuid",
    "chrono",
    "json",
], optional = true }
tera = { workspace = true, optional = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tokio-util = { workspace = true, features = ["codec"] }
tower = { workspace = true, features = ["util"] }
tower-http = { workspace = true, features = [
    "timeout",
    "trace",
    "limit",
    "cors",
], optional = true }
tracing = { workspace = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, features = [
    "env-filter",
    "json",
], optional = true }
tonic = { workspace = true, optional = true }
tonic-health = { workspace = true, optional = true }
url = { workspace = true }
uuid = { workspace = true, features = ["v4", "serde"], optional = true }
vkteams-bot-macros = { workspace = true }

[features]
default = ["longpoll"]
full = [
    "webhook",
    "longpoll",
    "templates",
    "grpc",
    "otlp",
    "ratelimit",
    "storage-full",
    "webhook",
]
longpoll = []
webhook = ["dep:axum", "dep:tower-http"]
templates = ["dep:tera"]
grpc = ["dep:tonic-health", "dep:tonic"]
otlp = [
    "dep:tracing-subscriber",
    "dep:tracing-opentelemetry",
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:opentelemetry-otlp",
    "dep:opentelemetry-semantic-conventions",
]
ratelimit = []
# New storage features
storage = ["database"]
vector-search = ["pgvector", "database"]
database = ["sqlx"]
sqlx = ["dep:sqlx", "dep:uuid", "dep:chrono"]
pgvector = ["dep:pgvector"]
ai-embeddings = ["dep:openai-api-rs", "dep:ollama-rs", "dep:rayon"]
storage-full = ["storage", "vector-search", "ai-embeddings"]

[dev-dependencies]
criterion = { workspace = true, features = [
    "async",
    "async_tokio",
    "html_reports",
] }
dhat = { workspace = true }
dotenvy = { workspace = true }
futures = { workspace = true }
proptest = { workspace = true }
serial_test = { workspace = true }
tempfile = { workspace = true }
tonic = { workspace = true }
testcontainers = { workspace = true }
testcontainers-modules = { workspace = true, features = ["postgres"] }
vkteams-bot = { workspace = true, features = ["full"] }

[[bench]]
name = "performance"
harness = false

[[bench]]
name = "chat_id_optimization"
harness = false

[[bench]]
name = "longpoll_parallel_perf"
harness = false

[[bench]]
name = "net_perf_simple"
harness = false

[[bench]]
name = "net_performance"
harness = false

[[bench]]
name = "ratelimit_lockfree_perf"
harness = false
